[tool.cibuildwheel]
build-verbosity = 2

[tool.cibuildwheel.linux]

    test-skip = [
        # See: https://github.com/pyFFTW/pyFFTW/issues/325
        "*i686",

        # See: https://github.com/pyFFTW/pyFFTW/issues/326
        "*aarch64",

        # Until SciPy gives us PyPy wheels
        "pp*",
    ]

    # Fallback, but we specify versions more explicitly below to achieve maximal
    # compatibility
    before-all = "yum install -y fftw-devel"

    manylinux-x86_64-image = "manylinux_2_28"
    manylinux-aarch64-image = "manylinux_2_28"
    manylinux-ppc64le-image = "manylinux_2_28"
    manylinux-s390x-image = "manylinux_2_28"
    manylinux-pypy_x86_64-image = "manylinux_2_28"
    manylinux-pypy_aarch64-image = "manylinux_2_28"

    archs = [
        "x86_64",
        "aarch64",
    ]    

    # Currently not supported
    # Even numpy does not support this
    # This is ignored in the wheel_tests_and_release.yml file
    # [[tool.cibuildwheel.overrides]]
    # select = "*-musllinux*"
    # before-all = "apk add fftw-dev"

[build-system]
requires = [
    "wheel>=0.31.0",
    "setuptools>=38.6.0",
    "Cython>=0.29.18",

    # NumPy dependencies - to update these, sync from
    # https://github.com/scipy/oldest-supported-numpy/
    # https://github.com/scipy/scipy/blob/master/pyproject.toml
    # and then
    # update minimum version to match our install_requires min version
    # ----------------------------------------------------------------

    # now matches minimum supported version, keep here as separate requirement
    # to be able to sync more easily with oldest-supported-numpy
    "numpy==1.19.5; python_version=='3.8' and platform_machine=='aarch64' and platform_python_implementation != 'PyPy'",

    # arm64 on Darwin supports Python 3.8 and above requires numpy>=1.21.0
    # (first version with arm64 wheels available)
    "numpy==1.21.0; python_version=='3.8' and platform_machine=='arm64' and platform_system=='Darwin'",
    "numpy==1.21.0; python_version=='3.9' and platform_machine=='arm64' and platform_system=='Darwin'",

    # loongarch64 requires numpy>=1.22.0
    "numpy==1.22.0; platform_machine=='loongarch64'",

    # On Windows we need to avoid 1.21.6, 1.22.0 and 1.22.1 because they were
    # built with vc142. 1.22.3 is the first version that has 32-bit Windows
    # wheels *and* was built with vc141. So use that:
    "numpy==1.22.3; python_version=='3.10' and platform_system=='Windows' and platform_python_implementation != 'PyPy'",

    # default numpy requirements
    "numpy==1.19.5; python_version=='3.8' and (platform_machine!='arm64' or platform_system!='Darwin') and platform_machine!='aarch64' and platform_machine!='loongarch64' and platform_python_implementation != 'PyPy'",
    "numpy==1.19.5; python_version=='3.9' and (platform_machine!='arm64' or platform_system!='Darwin') and platform_machine!='loongarch64' and platform_python_implementation != 'PyPy'",
    # Note that 1.21.3 was the first version with a complete set of 3.10 wheels,
    # however macOS was broken and it's safe C API/ABI-wise to build against 1.21.6
    # (see oldest-supported-numpy issues gh-28 and gh-45)
    "numpy==1.21.6; python_version=='3.10' and (platform_system!='Windows' and platform_machine!='loongarch64') and platform_python_implementation != 'PyPy'",
    "numpy==1.23.2; python_version=='3.11' and platform_python_implementation != 'PyPy'",

    # For Python versions which aren't yet officially supported,
    # we specify an unpinned NumPy which allows source distributions
    # to be used and allows wheels to be used as soon as they
    # become available.
    "numpy; python_version>='3.12'",
    "numpy; python_version>='3.9' and platform_python_implementation=='PyPy'",
]
build-backend = "setuptools.build_meta"